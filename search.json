[{"path":"https://maximesunnen.github.io/flowFate/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Maxime Sünnen Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://maximesunnen.github.io/flowFate/articles/Curation.html","id":"gating-live-cells","dir":"Articles","previous_headings":"","what":"Gating live cells","title":"Data Curation","text":"Preparing samples flow cytometry inevitably lead formation damaged dead cells (also called “debris”) need excluded analysis. Conveniently, can distinguish cells SSC vs FSC plot remove appropriate gates. flowFate, remove debris “hard” gate (FIGURE!!!). means gate boundaries predefined users able manually change . needs considered acquisition ensure intact cells accumulate pre-defined window. Note: Advanced R users nevertheless manually adjust gate boundaries changing respective gating matrix source code.","code":""},{"path":"https://maximesunnen.github.io/flowFate/articles/Curation.html","id":"setting-up-the-gate-matrix","dir":"Articles","previous_headings":"Gating live cells","what":"1) Setting up the gate matrix","title":"Data Curation","text":"first need set m x n gate matrix: n, number columns, corresponds gating dimensions (n = 2 since cells gated based location 2D SSC vs FSC plot) m, number rows, corresponds number individual points make rectangle gate. row contain X Y coordinates (first second column matrix, respectively) latter points. rename columns match gating dimensions. Since FSC SSC channels change depending flow cytometer, user can select appropriate channel names columns gate matrix adapted based selection.","code":"# creating the gate matrix pgn_cut <- matrix(c(12500, 99000, 99000,0,0,6250, 6250, 99000, 99000,12500), ncol = 2, nrow = 5) # renaming the columns to match the gating dimensions colnames(pgn_cut) <- c(\"Side scatter\", \"Forward scatter\") #>      Side scatter Forward scatter #> [1,]        12500            6250 #> [2,]        99000            6250 #> [3,]        99000           99000 #> [4,]            0           99000 #> [5,]            0           12500"},{"path":"https://maximesunnen.github.io/flowFate/articles/Curation.html","id":"create-the-gate","dir":"Articles","previous_headings":"Gating live cells","what":"2) Create the gate","title":"Data Curation","text":"create gate using flowCore’s polygonGate( ) function. filterId argument uniquely identifies generated gate.","code":"gate_non_debris <- reactive(polygonGate(filterId = \"NonDebris\", .gate = pgn_cut))"},{"path":"https://maximesunnen.github.io/flowFate/articles/Curation.html","id":"apply-the-gate-to-the-gatingset","dir":"Articles","previous_headings":"Gating live cells","what":"3) Apply the gate to the GatingSet","title":"Data Curation","text":"now, created gate gate matrix. add gate GatingSet (r$gs, created data import (reference import vignette section)), use gs_pop_add( ). Recomputing r$gs recompute( ), apply gate data.","code":"gs_pop_add(r$gs, gate_non_debris(), parent = \"root\") recompute(r$gs)"},{"path":"https://maximesunnen.github.io/flowFate/articles/Curation.html","id":"gating-gfp-cells","dir":"Articles","previous_headings":"","what":"Gating GFP+ cells","title":"Data Curation","text":"flowFate mainly developed study effect transfection GFP-labeled KRas constructs C2C12 differentiation. analyis therefore focused transfected cells . Untransfected cells however, due background noise autofluorescence, can also emit fluorescence captured green channel flow cytometer. distinguish transfected untransfected cells, apply GFP threshold data cells certain threshold intensity removed analysis. determine value threshold, use: double-negative control sample: untransfected, unlabelled C2C12 MyHC-control sample: untransfected C2C12, labelled antibody myosin heavy-chain (MyHC) control samples, observed GFP signal (green channel flow cytometer) unspecific illustrated . SCREENSHOT key idea determine GFP threshold cells two controls samples threshold. use threshold create gate keeps cells threshold, .e GFP signal specific.","code":""},{"path":"https://maximesunnen.github.io/flowFate/articles/Curation.html","id":"determine-a-gfp-threshold-intensity","dir":"Articles","previous_headings":"Gating GFP+ cells","what":"1) Determine a GFP threshold intensity","title":"Data Curation","text":"work wrapped custom function get_lowerLimit( ).","code":"get_lowerLimit <- function(gs, datasets, node, ch_gate, r) {   require(flowCore)   # extract the data from the two control samples as a flowSet   x <- gs_pop_get_data(r$gs[[datasets]], node) |> cytoset_to_flowSet()      # for each dataset of the extracted flowSet, create a quantile gate using the correct channel name (in our case this will be the name of the GFP channel selected by the user)   y <- fsApply(x, function(fr) {     openCyto::gate_quantile(fr, channel = ch_gate, probs = 0.99)   })      # return the average of two quantile gate's lower limit   z <- mean(c(y[[1]]@min, y[[2]]@min)) } lower_limit_gfp_gate <- reactive({   get_lowerLimit(gs = r$gs, datasets = c(input$negative_control, input$positive_control_myhc), node = \"NonDebris\", ch_gate = input$kras_channel, r = r) }) |> bindEvent(input$Curate) create_quantile_gate <- function(samples, gate_channel) {   require(flowCore)   fsApply(samples, function(fr) {     print(fr)     openCyto::gate_quantile(fr, channel = gate_channel, probs = 0.99)   }) }"},{"path":[]},{"path":"https://maximesunnen.github.io/flowFate/articles/Data-import.html","id":"number-of-datasets","dir":"Articles","previous_headings":"A - Merged file upload","what":"1) Number of datasets","title":"Data-import","text":"first fetch number datasets contained merged .fcs file. function use contains code adapted RGLab.","code":"n_datasets <- function(filename) {     con <- file(filename, open = \"rb\")          offsets <- flowCore:::readFCSheader(con)     offsets <- matrix(offsets, nrow = 1, dimnames = list(NULL, names(offsets)))     txt <- flowCore:::readFCStext(con, offsets[1, ],emptyValue = FALSE)          addOff <- 0          if (\"$NEXTDATA\" %in% names(txt)) {         nd <- as.numeric(txt[[\"$NEXTDATA\"]])     } else         nd <- 0          txt.list <- list(txt)     i <- 1     while (nd != 0) {         i <- i + 1         addOff <- addOff + nd         offsets <- rbind(offsets, flowCore:::readFCSheader(con, addOff))         this.txt <- flowCore:::readFCStext(con, offsets[nrow(offsets),], emptyValue = FALSE)         nd <- as.numeric(this.txt[[\"$NEXTDATA\"]])         txt.list[[i]] <- this.txt     }     length(txt.list) }"},{"path":"https://maximesunnen.github.io/flowFate/articles/Data-import.html","id":"writing-individual--fcs-files","dir":"Articles","previous_headings":"A - Merged file upload","what":"2) Writing individual .fcs files","title":"Data-import","text":"datasets merged .fcs files written individual .fcs files temporary folder value $WELLID keyword appended filename.","code":"split_1_fcs <- function(nb, input_file) {   # create a folder named fcs_input   if (!dir_exists(path(path_dir(input_file), \"fcs_input\"))) dir_create(path(path_dir(input_file), \"fcs_input\"))    # walk along every dataset and read it in as a flowFrame (data structure from flowCore)   walk(seq_len(nb_ds), \\(x) {   fr <- read.FCS(filename, dataset = x, transformation = FALSE, truncate_max_range = FALSE, alter.names = TRUE, emptyValue = FALSE) message(paste(\"Write file #\", x, \"well\", fr@description$`$WELLID`))    # write the flowframes to individual FCS files inside the fcs_input folder write.FCS(fr, fs::path(\"fcs_input\", paste0(\"dataset_\", fr@description$`$WELLID`, \".fcs\"))) })    # return the complete path of the fcs_input folder   path(path_dir(input_file), \"fcs_input\") }  # create a reactive expression that, when called, executes the split_1_fcs() function and returns a directory individual_fcs <- reactive(split_1_fcs(nb_ds(), input$filename$datapath))"},{"path":"https://maximesunnen.github.io/flowFate/articles/Data-import.html","id":"creating-a-flowset","dir":"Articles","previous_headings":"A - Merged file upload","what":"3) Creating a flowSet","title":"Data-import","text":"Individual .fcs files stored temporary folder read flowSet (data structure flowCore). reactive expression individual_fcs() returns directory folder uploaded folder individual fcs files.","code":"fs <- reactive(read.flowSet(fs::dir_ls(individual_fcs(), glob = \"*.fcs\"), truncate_max_range = FALSE, alter.names = TRUE, transformation = FALSE))"},{"path":"https://maximesunnen.github.io/flowFate/articles/Data-import.html","id":"b---individual-file-upload","dir":"Articles","previous_headings":"","what":"B - Individual file upload","title":"Data-import","text":"Note: Individual files (FCS3.0) grouped inside folder. Steps 1) 2) now dispensable can immediately create flowSet.","code":""},{"path":"https://maximesunnen.github.io/flowFate/articles/Data-import.html","id":"creating-a-flowset-1","dir":"Articles","previous_headings":"B - Individual file upload","what":"1) Creating a flowSet","title":"Data-import","text":"","code":"fs <- reactive({   read.flowSet(path = filename(), truncate_max_range = FALSE, alter.names = TRUE, transformation = FALSE, emptyValue = FALSE) })"},{"path":"https://maximesunnen.github.io/flowFate/articles/Data-import.html","id":"c---gatingset","dir":"Articles","previous_headings":"","what":"C - GatingSet","title":"Data-import","text":"flowFrame flowSet data structures flowCore useful handling flow cytometry data R. GatingSet data structure flowWorkspace however better suited storing manipulating gated data.","code":""},{"path":"https://maximesunnen.github.io/flowFate/articles/Data-import.html","id":"creating-a-gatingset","dir":"Articles","previous_headings":"C - GatingSet","what":"1) Creating a gatingSet","title":"Data-import","text":"create gatingSet flowSet using GatingSet() function flowWorkspace.","code":"gs <- reactive({GatingSet(fs())})"},{"path":"https://maximesunnen.github.io/flowFate/articles/Data-import.html","id":"d---sharing-reactive-values-across-modules","dir":"Articles","previous_headings":"","what":"D - Sharing reactive values across modules","title":"Data-import","text":"{golem} framework promotes use modules split app separate, smaller parts. {golem} provides couple techniques allow communication modules. opted “stratégie du petit r”. Briefly, list reactive values - called r (hence name technique) - passed along modules.","code":""},{"path":"https://maximesunnen.github.io/flowFate/articles/Data-import.html","id":"completing-the-reactive-list-r","dir":"Articles","previous_headings":"D - Sharing reactive values across modules","what":"1) Completing the reactive list r","title":"Data-import","text":"add gatingSet, flowSet nb_ds reactive expression reactive list. ’re now able use variables modules calling r$gs, r$fs r$nb_ds. read reactive expressions Shiny, wrapped inside observe( ).","code":"observe({       r$gs <- GatingSet(fs())       r$fs <- fs()       r$nb_ds <- nb_ds()     })"},{"path":"https://maximesunnen.github.io/flowFate/articles/app-dockerisation.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"App Dockerisation","text":"Shiny apps great using R interactively. Nevertheless, app uses different packages /package versions even different R versions. save users constantly installing required versions specific Shiny app, developers can opt ShinyProxy deploy application Shiny Server. app becomes docker image set packages every time user launches app, container image spawn appropriate image.","code":""},{"path":"https://maximesunnen.github.io/flowFate/articles/app-dockerisation.html","id":"dockerization","dir":"Articles","previous_headings":"","what":"Dockerization","title":"App Dockerisation","text":"Makes sure folder deploy exists project root. Follow steps dev/03_deploy.R, namely: Note: dockerfiler needed ( uses pak). obtain README deploy : deploy folder contains: scp deploy folder `shiny-sever` shinyproxy container_apps/ execute root commands README Make sure use binary versions Linux PPPM RUN R -e \"renv::restore(repos = 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/')\" edit ~/deploiement/container_system/shinyproxy-docker/application.yml adding something like: ~/deploiement/, run ./relance_machinerie new app linked.","code":"devtools::check() devtools::build() golem::add_dockerfile_with_renv_shinyproxy(output_dir = \"deploy\", lockfile = \"renv.lock\") # if renv.lock.prod is missing attachment::create_renv_for_prod() file.copy(\"renv.lock.prod\", \"deploy/renv.lock.prod\") docker build -f Dockerfile_base --progress=plain -t flowfate_base . docker build -f Dockerfile --progress=plain -t flowfate:latest . docker run -p 3838:3838 flowfate:latest # then go to 127.0.0.1:3838 Dockerfile Dockerfile_base flowFate_0.1.0.tar.gz README renv.lock renv.lock.prod docker build -f Dockerfile_base --progress=plain -t flowfate_base . docker build -f Dockerfile --progress=plain -t flowfate:latest . - id: flowfate     display-name: flowFate     container-network: sp-network     description: Application Flow Cytometry Gating Maxime Sünnen     container-cmd: [\"R\", \"-e\", \"library(flowFate);options('shiny.port'=3838,shiny.host='0.0.0.0');flowFate::run_app()\"]     container-image: flowfate"},{"path":"https://maximesunnen.github.io/flowFate/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Maxime Sünnen. Maintainer, author. Aurélien Ginolhac. Author.","code":""},{"path":"https://maximesunnen.github.io/flowFate/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sünnen M, Ginolhac (2023). flowFate: Shiny App Flow Cytometry Data. https://github.com/maximesunnen/flowFate, https://maximesunnen.github.io/flowFate/.","code":"@Manual{,   title = {flowFate: Shiny App for Flow Cytometry Data},   author = {Maxime Sünnen and Aurélien Ginolhac},   year = {2023},   note = {https://github.com/maximesunnen/flowFate, https://maximesunnen.github.io/flowFate/}, }"},{"path":"https://maximesunnen.github.io/flowFate/index.html","id":"flowfate","dir":"","previous_headings":"","what":"Shiny App for Flow Cytometry Data","title":"Shiny App for Flow Cytometry Data","text":"Note: documentation flowFate still ongoing FlowFate free, interactive Shiny web application developed automate analysis cell differentiation data obtained flow cytometry. developed flowFate combining existing R packages flowCore flowWorkspace FCS file import data manipulation gating ggcyto visualization customized workflow tailored analysis differentiation data. able automate crucial time-consuming process data analysis using openCyto’s data-driven gating functions. Built {golem}. Note: flowFate supports FCS3.0","code":""},{"path":"https://maximesunnen.github.io/flowFate/index.html","id":"background","dir":"","previous_headings":"","what":"Background","title":"Shiny App for Flow Cytometry Data","text":"FlowFate designed analysis cell differentiation data obtained according Chippalkatti et al’s protocol. Briefly, C2C12 cells can turn (“differentiate”) muscle cells point life cycle. differentiate, cells immature state (scientists call “undifferentiated”). Technically, one analyze pool C2C12 cells microscope visually determine percentage differentiated cells specific condition (temperature, nutrients, …). Practically however, tedious. Luckily, differentiated muscle cells produce protein called myosin (low amounts) produced undifferentiated cells. Using antibody attached fluorescent molecule (.e molecule can emit light certain wavelength excited laser), possible stain myosin analyze pool cells using flow cytometer. flow cytometer device used biological research channels cells small capillary pass front laser one--one. laser light excites fluorescent molecule attached antibody, antibody attached myosin protein present cell. light emitted fluorescent molecule response excitation can captured camera. amount light captured reflects amount myosin present cell, allowing us determine cell differentiated . Keep mind even undifferentiated cells can produce small amounts myosin therefore differentiated cells ’re interested produce larger amounts.","code":""},{"path":[]},{"path":"https://maximesunnen.github.io/flowFate/index.html","id":"install-r-and-r-studio","dir":"","previous_headings":"Installation: users outside the University of Luxembourg","what":"Install R and R Studio","title":"Shiny App for Flow Cytometry Data","text":"Click download instructions. Note:  Skip step access R via server.","code":""},{"path":"https://maximesunnen.github.io/flowFate/index.html","id":"install-flowfate","dir":"","previous_headings":"Installation: users outside the University of Luxembourg","what":"Install flowFate","title":"Shiny App for Flow Cytometry Data","text":"R R Studio installed, run commands given order R Studio console. large amount dependencies, installation can take 15 minutes.","code":"# install the remotes and BiocManager package install.packages(c(\"remotes\", \"BiocManager\")) # install dependencies from Bioconductor BiocManager::install(c(\"ggcyto\", \"flowWorkspace\", \"flowCore\")) remotes::install_github(\"openCyto\") # install the latest release of the flowFate package remotes::install_github(\"maximesunnen/flowFate@*release\") # Launch the app flowFate::run_app()"},{"path":"https://maximesunnen.github.io/flowFate/index.html","id":"installation-users-from-the-university-of-luxembourg","dir":"","previous_headings":"Installation: users outside the University of Luxembourg","what":"Installation: users from the University of Luxembourg","title":"Shiny App for Flow Cytometry Data","text":"Users access network University Luxembourg need install R R Studio can use following link instead: https://shiny-server.uni.lu/app/flowfate. Note link work connected University’s network.","code":""},{"path":"https://maximesunnen.github.io/flowFate/index.html","id":"get-started","dir":"","previous_headings":"Installation: users outside the University of Luxembourg","what":"Get started","title":"Shiny App for Flow Cytometry Data","text":"app looks like:  example Non-debris plots gating:","code":""},{"path":"https://maximesunnen.github.io/flowFate/reference/run_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the Shiny Application — run_app","title":"Run the Shiny Application — run_app","text":"Run Shiny Application","code":""},{"path":"https://maximesunnen.github.io/flowFate/reference/run_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the Shiny Application — run_app","text":"","code":"run_app(   onStart = NULL,   options = list(),   enableBookmarking = NULL,   uiPattern = \"/\",   ... )"},{"path":"https://maximesunnen.github.io/flowFate/reference/run_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the Shiny Application — run_app","text":"onStart function called app actually run. needed shinyAppObj, since shinyAppDir case, global.R file can used purpose. options Named options passed runApp call (can following: \"port\", \"launch.browser\", \"host\", \"quiet\", \"display.mode\" \"test.mode\"). can also specify width height parameters provide hint embedding environment ideal height/width app. enableBookmarking Can one \"url\", \"server\", \"disable\". default value, NULL, respect setting previous calls  enableBookmarking(). See enableBookmarking() information bookmarking app. uiPattern regular expression applied GET request determine whether ui used handle request. Note entire request path must match regular expression order match considered successful. ... arguments pass golem_opts. See `?golem::get_golem_options` details.","code":""},{"path":[]},{"path":"https://maximesunnen.github.io/flowFate/news/index.html","id":"flowfate-012","dir":"Changelog","previous_headings":"","what":"flowFate 0.1.2","title":"flowFate 0.1.2","text":"replaced demo data golem added DESCRIPTION imports","code":""},{"path":"https://maximesunnen.github.io/flowFate/news/index.html","id":"flowfate-011","dir":"Changelog","previous_headings":"","what":"flowFate 0.1.1","title":"flowFate 0.1.1","text":"opted less big demo file (< 5MB) changed read-demo file","code":""},{"path":"https://maximesunnen.github.io/flowFate/news/index.html","id":"flowfate-010","dir":"Changelog","previous_headings":"","what":"flowFate 0.1.0","title":"flowFate 0.1.0","text":"added option submit single, merged FCS files well folder individual FCS files Added pkgdown website added favicon using hexmake","code":""},{"path":"https://maximesunnen.github.io/flowFate/news/index.html","id":"flowfate-0009000","dir":"Changelog","previous_headings":"","what":"flowFate 0.0.0.9000","title":"flowFate 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]

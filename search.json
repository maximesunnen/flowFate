[{"path":"https://maximesunnen.github.io/flowFate/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Maxime Sünnen Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://maximesunnen.github.io/flowFate/articles/Curation.html","id":"gating-live-cells","dir":"Articles","previous_headings":"","what":"Gating live cells","title":"Data Curation","text":"Preparing samples flow cytometry inevitably damages kills cells. “debris” need excluded subsequent analysis. Cellular debris can identified SSC vs FSC plots, enabling easy removal using gates.  FlowFate, debris removal accomplished using hard-coded rectangle gate, meaning gate boundaries predefined modified users. essential users consider aspect acquisition ensure intact cells accumulate within specified window (information, see ).","code":""},{"path":"https://maximesunnen.github.io/flowFate/articles/Curation.html","id":"set-up-the-gate-matrix","dir":"Articles","previous_headings":"Gating live cells","what":"1) Set up the gate matrix","title":"Data Curation","text":"first need set m x n gate matrix: n (number columns) corresponds gating dimensions. n = 2 (SSC + FSC). m (number rows) corresponds number individual points make rectangle gate. m = 5. row comprises X Y coordinates gate edge. use polygon 5 edges, thus gating matrix 5 rows. column names renamed becuase need match channel names used gate data (SSC.HLin FSC.HLin). Note: Forward- side-scatter channel names vary depending flow cytometer used. , illustration purposes, name “SSC.HLin” “FSC.HLin” matches channel names machine. FlowFate, corresponding channels can selected user. gating matrix now looks like created gate like (red rectagnle)","code":"# creating the gate matrix pgn_cut <- matrix(c(12500, 99000, 99000,0,0,6250, 6250, 99000, 99000,12500), ncol = 2, nrow = 5) # renaming the columns to match the gating dimensions colnames(pgn_cut) <- c(\"SSC.HLin\", \"FSC.HLin\") #>      SSC.HLin FSC.HLin #> [1,]    12500     6250 #> [2,]    99000     6250 #> [3,]    99000    99000 #> [4,]        0    99000 #> [5,]        0    12500"},{"path":"https://maximesunnen.github.io/flowFate/articles/Curation.html","id":"create-the-nondebris-gate","dir":"Articles","previous_headings":"Gating live cells","what":"2) Create the NonDebris gate","title":"Data Curation","text":"now create gating matrix. use matrix create NonDebris gate flowCore’s polygonGate( ) function. filterId argument uniquely identifies gate.","code":"gate_non_debris <- reactive(polygonGate(filterId = \"NonDebris\", .gate = pgn_cut))"},{"path":"https://maximesunnen.github.io/flowFate/articles/Curation.html","id":"gate-the-data","dir":"Articles","previous_headings":"Gating live cells","what":"3) Gate the data","title":"Data Curation","text":"apply gate data adding NonDebris gate GatingSet r$gs (see data import vignette) using gs_pop_add( ). need recompute( ) r$gs.","code":"gs_pop_add(r$gs, gate_non_debris(), parent = \"root\") recompute(r$gs)"},{"path":"https://maximesunnen.github.io/flowFate/articles/Curation.html","id":"gating-gfp-cells","dir":"Articles","previous_headings":"","what":"Gating GFP+ cells","title":"Data Curation","text":"FlowFate designed study effect GFP-labeled KRAS C2C12 differentiation. Consequently, analysis must concentrate successfully transfected cells. Nonetheless, background noise autofluorescence introduce unspecific fluorescent signals untransfected cells. address , use GFP-threshold data analysis effectively exclude untransfected cells emissions specified threshold. approach ensures analysis focuses relevant, transfected cells excluding undesired noise. GFP threshold determined using two control samples: double-negative control sample: untransfected, unlabelled C2C12 MyHC-control sample: untransfected C2C12, labelled eFluor660-labeled antibody targeting heavy-chain myosin protein (MyHC). control samples, fluorescence signals observed green channel “GRN.B.HLin” result cellular autofluorescence thus unspecific. Thus, analyzing intensity distribution, can establish threshold effectively excludes majority events. threshold (red line figure ) becomes reference point distinguish untransfected cells (falling treshold) transfected cells (threshold). gate transfected cells datasets, apply established threshold remove cells falling .","code":""},{"path":"https://maximesunnen.github.io/flowFate/articles/Curation.html","id":"determine-a-gfp-threshold","dir":"Articles","previous_headings":"Gating GFP+ cells","what":"1) Determine a GFP threshold","title":"Data Curation","text":"computation wrapped inside custom function get_lowerLimit( ). function several arguments: gs: GatingSet use datasets: Datasets used establish threshold (.e. control samples) node: Existing gate extract data . example, establish GFP threshold based intensity distribution green channel intact cells. Thus, need use data NonDebris gate. ch_gate: channel based gate determined (GPF channel “GRN.B.HLin”) r: required use golem framework use openCyto’s gate_quantile( ) function algorithmically establish GFP threshold. Based probs (probabilities) argument, function determines sample quantiles create rectangle gate excluding events outside quantile. example, probs = 0.25 probs = 0.5, gate_quantile( ) establishes threshold first second quartile, respectively. created interval gate ranges established threshold infinity. case, used probs = 0.99 exclude 99% events control samples. avoid unreasonably high thresholds due outliers use probs = 1 may lead loss transfected cells. addition, averaged threshold obtained control samples store value lower_limit_gfp_gate variable.","code":"get_lowerLimit <- function(gs, datasets, node, ch_gate, r) {   # extract the data as a flowSet   x <- gs_pop_get_data(r$gs[[datasets]], node) |> cytoset_to_flowSet()   # create a quantile gate using extracted data and the respective channel name   y <- create_quantile_gate(x, gate_channel = ch_gate)   # average the minimum values from the respective quantile gateS(!)   z <- mean(c(y[[1]]@min, y[[2]]@min)) } lower_limit_gfp_gate <- reactive({   get_lowerLimit(gs = r$gs,                  datasets = c(input$negative_control, input$positive_control_myhc),                  node = \"NonDebris\",                  ch_gate = input$kras_channel,                  r = r) }) |> bindEvent(input$Curate)"},{"path":"https://maximesunnen.github.io/flowFate/articles/Curation.html","id":"create-a-gfp-gate","dir":"Articles","previous_headings":"Gating GFP+ cells","what":"2) Create a GFP gate","title":"Data Curation","text":"now established adequate GFP threshold. now use create gfp_gate. computations wrapped custom function make_gate( ). logic behind gate described .","code":"make_gate <- function(lower_limit, col_name, filterId) {   mat <- matrix(c(lower_limit, Inf), ncol = 1)   colnames(mat) <- col_name   return(rectangleGate(filterId = filterId, .gate = mat)) }  gfp_gate <- reactive({   make_gate(lower_limit_gfp_gate(),             input$kras_channel,             filterId = \"GFP+\")})"},{"path":"https://maximesunnen.github.io/flowFate/articles/Curation.html","id":"apply-the-gfp-gate","dir":"Articles","previous_headings":"Gating GFP+ cells","what":"3) Apply the GFP gate","title":"Data Curation","text":"gate transfected cells datasets, add gfp_gate GatingSet recomputing GatingSet.","code":"# add the gfp_gate to the GatingSet gs_pop_add(r$gs, gfp_gate(), parent = \"NonDebris\")  #recompute the GatingSet recompute(r$gs)"},{"path":[]},{"path":"https://maximesunnen.github.io/flowFate/articles/Data-import.html","id":"fetch-the-number-of-datasets","dir":"Articles","previous_headings":"A - Merged file upload","what":"1) Fetch the number of datasets","title":"Data-import","text":"first fetch number datasets contained merged .fcs file (code adapted RGLab).","code":"n_datasets <- function(filename) {   # Adapted code from https://github.com/RGLab/flowCore/blob/ba3b6ffed5310c1c0618487ab163c0142d8cab8f/R/IO.R    # the keyword $NEXTDATA contains either a zero when there are no next data   # or a positive integer for the next dataset   counter <- 0   nextdata <- 1   while (nextdata != 0) {     counter <- counter + 1     nextdata <- read.FCSheader(filename, keyword = \"$NEXTDATA\", emptyValue = FALSE, dataset = counter)     nextdata <- as.integer(nextdata[[1]][\"$NEXTDATA\"])   }   counter }"},{"path":"https://maximesunnen.github.io/flowFate/articles/Data-import.html","id":"write-individual--fcs-files","dir":"Articles","previous_headings":"A - Merged file upload","what":"2) Write individual .fcs files","title":"Data-import","text":"write individual datasets inside merged .fcs file individual .fcs files temporary folder using custom split_1_fcs( ) function. append $WELLID keyword filename.","code":"split_1_fcs <- function(nb, input_file) {   # create a folder named fcs_input in a temporary location   if (!dir_exists(path(path_dir(input_file), \"fcs_input\"))) dir_create(path(path_dir(input_file), \"fcs_input\"))      # walk along every dataset and read it as a flowFrame (data structure from flowCore)   walk(seq_len(nb_ds), \\(x) {     fr <- read.FCS(filename, dataset = x,                    transformation = FALSE,                    truncate_max_range = FALSE,                    alter.names = TRUE,                    emptyValue = FALSE)     message(paste(\"Write file #\", x, \"well\", fr@description$`$WELLID`))          # write flowframes to individual FCS files inside the fcs_input folder     write.FCS(fr, fs::path(\"fcs_input\", paste0(\"dataset_\", fr@description$`$WELLID`, \".fcs\")))   })      # return the complete path of the fcs_input folder   path(path_dir(input_file), \"fcs_input\") }  # create a reactive expression that, when called, executes the split_1_fcs() function and returns a directory individual_fcs <- reactive(split_1_fcs(nb_ds(), input$filename$datapath))"},{"path":"https://maximesunnen.github.io/flowFate/articles/Data-import.html","id":"create-a-flowset","dir":"Articles","previous_headings":"A - Merged file upload","what":"3) Create a flowSet","title":"Data-import","text":"read individual .fcs files (stored fcs_input temporary folder) flowSet, data structure flowCore package). reactive expression individual_fcs() returns directory fcs_input temporary folder.","code":"fs <- reactive(read.flowSet(fs::dir_ls(individual_fcs(), glob = \"*.fcs\"),                              truncate_max_range = FALSE,                             alter.names = TRUE,                             transformation = FALSE))"},{"path":"https://maximesunnen.github.io/flowFate/articles/Data-import.html","id":"b---individual-file-upload","dir":"Articles","previous_headings":"","what":"B - Individual file upload","title":"Data-import","text":"Note: Individual files (FCS3.0) grouped inside folder. Steps 1) 2) now dispensable can start creating flowSet.","code":""},{"path":"https://maximesunnen.github.io/flowFate/articles/Data-import.html","id":"create-a-flowset-1","dir":"Articles","previous_headings":"B - Individual file upload","what":"1) Create a flowSet","title":"Data-import","text":"Note: filename() reactive expression capturing patch folder user uploads.","code":"fs <- reactive({   read.flowSet(path = filename(),                truncate_max_range = FALSE,                alter.names = TRUE,                transformation = FALSE,                emptyValue = FALSE) })"},{"path":"https://maximesunnen.github.io/flowFate/articles/Data-import.html","id":"c---create-a-gatingset","dir":"Articles","previous_headings":"","what":"C - Create a GatingSet","title":"Data-import","text":"flowFrame flowSet data structures flowCore useful handling flow cytometry data R. GatingSet data structure flowWorkspace , however, better suited storing manipulating gated data.","code":""},{"path":"https://maximesunnen.github.io/flowFate/articles/Data-import.html","id":"create-a-gatingset-from-a-flowset","dir":"Articles","previous_headings":"C - Create a GatingSet","what":"1) Create a GatingSet from a flowSet","title":"Data-import","text":"use GatingSet() function flowWorkspace create GatingSet previous flowSet.","code":"gs <- reactive({GatingSet(fs())})"},{"path":"https://maximesunnen.github.io/flowFate/articles/Data-import.html","id":"d---sharing-reactive-values-across-modules","dir":"Articles","previous_headings":"","what":"D - Sharing reactive values across modules","title":"Data-import","text":"{golem} framework promotes use modules split Shiny app separate, smaller parts. Different techniques available {golem} allow communication modules. opted “stratégie du petit r”. Briefly, list reactive values - called r - passed along modules.","code":""},{"path":"https://maximesunnen.github.io/flowFate/articles/Data-import.html","id":"completing-the-reactive-list-r","dir":"Articles","previous_headings":"D - Sharing reactive values across modules","what":"1) Completing the reactive list r","title":"Data-import","text":"add GatingSet, flowSet nb_ds (number datasets) reactive expression reactive list. variables can now used modules calling r$gs, r$fs r$nb_ds. read reactive expressions Shiny, wrapped inside observe( ).","code":"observe({       r$gs <- GatingSet(fs())       r$fs <- fs()       r$nb_ds <- nb_ds()     })"},{"path":"https://maximesunnen.github.io/flowFate/articles/app-dockerisation.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"App Dockerisation","text":"Shiny apps great using R interactively. Nevertheless, app uses different packages /package versions even different R versions. save users constantly installing required versions specific Shiny app, developers can opt ShinyProxy deploy application Shiny Server. app becomes docker image set packages every time user launches app, container image spawn appropriate image.","code":""},{"path":"https://maximesunnen.github.io/flowFate/articles/app-dockerisation.html","id":"dockerization","dir":"Articles","previous_headings":"","what":"Dockerization","title":"App Dockerisation","text":"Makes sure folder deploy exists project root. Follow steps dev/03_deploy.R, namely: Note: dockerfiler needed ( uses pak). obtain README deploy : deploy folder contains: scp deploy folder `shiny-sever` shinyproxy container_apps/ execute root commands README Make sure use binary versions Linux PPPM RUN R -e \"renv::restore(repos = 'https://packagemanager.posit.co/cran/__linux__/jammy/latest/')\" edit ~/deploiement/container_system/shinyproxy-docker/application.yml adding something like: ~/deploiement/, run ./relance_machinerie new app linked.","code":"devtools::check() devtools::build() golem::add_dockerfile_with_renv_shinyproxy(output_dir = \"deploy\", lockfile = \"renv.lock\") # if renv.lock.prod is missing attachment::create_renv_for_prod() file.copy(\"renv.lock.prod\", \"deploy/renv.lock.prod\") docker build -f Dockerfile_base --progress=plain -t flowfate_base . docker build -f Dockerfile --progress=plain -t flowfate:latest . docker run -p 3838:3838 flowfate:latest # then go to 127.0.0.1:3838 Dockerfile Dockerfile_base flowFate_0.1.0.tar.gz README renv.lock renv.lock.prod docker build -f Dockerfile_base --progress=plain -t flowfate_base . docker build -f Dockerfile --progress=plain -t flowfate:latest . - id: flowfate     display-name: flowFate     container-network: sp-network     description: Application Flow Cytometry Gating Maxime Sünnen     container-cmd: [\"R\", \"-e\", \"library(flowFate);options('shiny.port'=3838,shiny.host='0.0.0.0');flowFate::run_app()\"]     container-image: flowfate"},{"path":"https://maximesunnen.github.io/flowFate/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Maxime Sünnen. Maintainer, author. Aurélien Ginolhac. Author.","code":""},{"path":"https://maximesunnen.github.io/flowFate/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sünnen M, Ginolhac (2023). flowFate: Shiny App Flow Cytometry Data. https://github.com/maximesunnen/flowFate, https://maximesunnen.github.io/flowFate/.","code":"@Manual{,   title = {flowFate: Shiny App for Flow Cytometry Data},   author = {Maxime Sünnen and Aurélien Ginolhac},   year = {2023},   note = {https://github.com/maximesunnen/flowFate, https://maximesunnen.github.io/flowFate/}, }"},{"path":"https://maximesunnen.github.io/flowFate/index.html","id":"flowfate","dir":"","previous_headings":"","what":"Shiny App for Flow Cytometry Data","title":"Shiny App for Flow Cytometry Data","text":"Note: documentation flowFate still ongoing FlowFate free, interactive Shiny web application developed automate analysis cell differentiation data obtained flow cytometry. developed flowFate combining existing R packages flowCore flowWorkspace FCS file import, data manipulation gating ggcyto visualization customized workflow tailored analysis differentiation data. able automate crucial time-consuming process data analysis using openCyto’s data-driven gating functions. Built {golem}. Note: flowFate supports FCS3.0","code":""},{"path":"https://maximesunnen.github.io/flowFate/index.html","id":"background","dir":"","previous_headings":"","what":"Background","title":"Shiny App for Flow Cytometry Data","text":"FlowFate designed analysis cell differentiation data obtained according Parisi et al’s protocol. Briefly, C2C12 cells can turn (“differentiate”) muscle cells point life cycle. differentiate, cells immature state (scientists call “undifferentiated”). Technically, one analyze pool C2C12 cells microscope visually determine percentage differentiated cells specific condition (temperature, nutrients, …). Practically however, tedious. Luckily, differentiated muscle cells produce protein called myosin (low amounts) produced undifferentiated cells. Using antibody attached fluorescent molecule (.e molecule can emit light certain wavelength excited laser), possible stain myosin analyze pool cells using flow cytometer. flow cytometer device used biological research channels cells small capillary pass front laser one--one. laser light excites fluorescent molecule attached antibody, antibody attached myosin protein present cell. light emitted fluorescent molecule response excitation can captured camera. amount light captured reflects amount myosin present cell, allowing us determine cell differentiated . Keep mind even undifferentiated cells can produce small amounts myosin therefore differentiated cells ’re interested produce larger amounts.","code":""},{"path":[]},{"path":"https://maximesunnen.github.io/flowFate/index.html","id":"install-r-and-r-studio","dir":"","previous_headings":"Installation: users outside the University of Luxembourg","what":"Install R and R Studio","title":"Shiny App for Flow Cytometry Data","text":"Click download instructions. Note:  Skip step access R via server.","code":""},{"path":"https://maximesunnen.github.io/flowFate/index.html","id":"install-flowfate","dir":"","previous_headings":"Installation: users outside the University of Luxembourg","what":"Install flowFate","title":"Shiny App for Flow Cytometry Data","text":"R R Studio installed, run commands given order R Studio console. large amount dependencies, installation can take 15 minutes.","code":"# install the remotes and BiocManager package install.packages(c(\"remotes\", \"BiocManager\")) # install dependencies from Bioconductor BiocManager::install(c(\"ggcyto\", \"flowWorkspace\", \"flowCore\")) remotes::install_github(\"openCyto\") # install the latest release of the flowFate package remotes::install_github(\"maximesunnen/flowFate@*release\") # Launch the app flowFate::run_app()"},{"path":"https://maximesunnen.github.io/flowFate/index.html","id":"installation-users-from-the-university-of-luxembourg","dir":"","previous_headings":"Installation: users outside the University of Luxembourg","what":"Installation: users from the University of Luxembourg","title":"Shiny App for Flow Cytometry Data","text":"Users access network University Luxembourg need install R R Studio can use following link instead: https://shiny-server.uni.lu/app/flowfate. Note link work connected University’s network.","code":""},{"path":"https://maximesunnen.github.io/flowFate/index.html","id":"get-started","dir":"","previous_headings":"Installation: users outside the University of Luxembourg","what":"Get started","title":"Shiny App for Flow Cytometry Data","text":"app looks like:  example Non-debris plots gating:","code":""},{"path":"https://maximesunnen.github.io/flowFate/reference/run_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the Shiny Application — run_app","title":"Run the Shiny Application — run_app","text":"Run Shiny Application","code":""},{"path":"https://maximesunnen.github.io/flowFate/reference/run_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the Shiny Application — run_app","text":"","code":"run_app(   onStart = NULL,   options = list(),   enableBookmarking = NULL,   uiPattern = \"/\",   ... )"},{"path":"https://maximesunnen.github.io/flowFate/reference/run_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the Shiny Application — run_app","text":"onStart function called app actually run. needed shinyAppObj, since shinyAppDir case, global.R file can used purpose. options Named options passed runApp call (can following: \"port\", \"launch.browser\", \"host\", \"quiet\", \"display.mode\" \"test.mode\"). can also specify width height parameters provide hint embedding environment ideal height/width app. enableBookmarking Can one \"url\", \"server\", \"disable\". default value, NULL, respect setting previous calls  enableBookmarking(). See enableBookmarking() information bookmarking app. uiPattern regular expression applied GET request determine whether ui used handle request. Note entire request path must match regular expression order match considered successful. ... arguments pass golem_opts. See `?golem::get_golem_options` details.","code":""},{"path":"https://maximesunnen.github.io/flowFate/news/index.html","id":"flowfate-development-version","dir":"Changelog","previous_headings":"","what":"flowFate (development version)","title":"flowFate (development version)","text":"added channel parameter plot_myosin_splittedPeaks( ) function user’s (!) channel name taken x argument aes(). unfortunately still defaulted machine’s channel name… getData_splitPeaks() function params argument now also takes account user’s (!) MyHC channel name implemented addition csv comments. “Metadata” (channel name, flowFate version, bin sizes) now included csv file.","code":""},{"path":"https://maximesunnen.github.io/flowFate/news/index.html","id":"flowfate-012","dir":"Changelog","previous_headings":"","what":"flowFate 0.1.2","title":"flowFate 0.1.2","text":"replaced demo data golem added DESCRIPTION imports","code":""},{"path":"https://maximesunnen.github.io/flowFate/news/index.html","id":"flowfate-011","dir":"Changelog","previous_headings":"","what":"flowFate 0.1.1","title":"flowFate 0.1.1","text":"opted less big demo file (< 5MB) changed read-demo file","code":""},{"path":"https://maximesunnen.github.io/flowFate/news/index.html","id":"flowfate-010","dir":"Changelog","previous_headings":"","what":"flowFate 0.1.0","title":"flowFate 0.1.0","text":"added option submit single, merged FCS files well folder individual FCS files Added pkgdown website added favicon using hexmake","code":""},{"path":"https://maximesunnen.github.io/flowFate/news/index.html","id":"flowfate-0009000","dir":"Changelog","previous_headings":"","what":"flowFate 0.0.0.9000","title":"flowFate 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
